
# <subject>
#   The first line can not exceed 72 characters (less than 50 is better)
#   A properly formed git commit object line should always be able to complete
#   the following sentence: If it is applied, this commit will <your description here>

# the subject is composed of:
#   <type>(scope): [ISSUE-XXXX] <description of the subject treated>

# Possible value for <type>:
#   feature (new feature for the user, not for the build script)
#   bugfix (bug fix for the user, not for the build script)
#   hotfix (urgent bug fix, not for the build script)
#   docs (update documents)
#   style (formatting, missing semicolons, etc ... no change in production code)
#   refactor (refactoring the production code: changing the name of the variable, rewriting the code, etc.)
#   test (add, delete, modify, update tests and fluff, no change of production code)
#   build (add or update build task, update release script)
#   chore (update dependencies, and any maintenance task), no change of production code

# Possible value for <scope> (optional):
#   init
#   js
#   structural
#   semantics
#   webserver
#   etc.

# Should Contain a JIRA ticket number [NUMBER-XXX] (optional)

# Use imperative mood for <description>

# <body>
#   Body of the message:
#   The message should be encapsulated to 80 characters
#   Use the imperative, present: "change" not "changed" or "change"
#   Includes motivation for change and contrast with previous behavior
#   Use the body to explain what and why and how.

# <footer>
#   Footer of the message: Refer to the problem (s) and provide links to relevant posts, articles or other resources
#   Closes / Fix / Resolve ISSUE-XXX (to close a problem)
#   In case of multiple problems: ISSUE-XYX farm, ISSUE-XYZ, ISSUE-AZV
#   Use BREAKING CHANGES and fully describe why and how to handle it

# Native Commit Message Start Here
